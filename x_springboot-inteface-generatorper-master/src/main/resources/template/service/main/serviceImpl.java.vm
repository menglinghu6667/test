package ${packageProject}.service.impl;

import com.github.pagehelper.PageHelper;
import com.github.pagehelper.PageInfo;
import ${packageProject}.domain.entity.${className};
import ${packageProject}.domain.mappers.${className}Mapper;
import ${packageProject}.service.${className}Service;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import java.util.ArrayList;
import java.util.List;

 /**
 * 业务描述：${className}的基本业务接口的实现
 * Project Name: ${project}
 * Package Name: ${packageProject}.service.impl
 * Author: ${email}
 * Date: ${datetime}
 * Copyright (c) 2018 跨越新科技 版权所有
 */
@Service
@Transactional
public class ${className}ServiceImpl implements ${className}Service  {
	@Autowired(required = false)
    private ${className}Mapper ${classname}Mapper;
	
	/**
     * 根据${className}的id获取该对象
     * @param ${pk.attrname} ${className}的id
     * @return ${className}对象
     */
    @Override
    public ${className} getBy${pk.attrName}(${pk.attrType} ${pk.attrname}){
        return ${classname}Mapper.get(${pk.attrname});
    }
	
	/**
     * 查询所有的${className}
     * @return 所有的${className}封装为List
     */
    @Override
    public List<${className}> findAll${className}(){
        return ${classname}Mapper.findAll();
    }
	
	/**
     * 更新${className}的属性值
     * @param ${classname} 需要更新的${className}对象
     * @return
     * @throws Exception
     */
    @Override
    public boolean update${className}(${className} ${classname}) throws Exception {
        ${classname}Mapper.update(${classname});
        return true;
    }
	
	/**
     * 新增${className}
     * @param ${classname} 新增的${className}对象
     * @return
     * @throws Exception
     */
    @Override
    public boolean save${className}(${className} ${classname}) throws Exception {
        ${classname}Mapper.save(${classname});
        return true;
    }
	
	/**
     * 删除${className}
     * @param ${pk.attrname} 删除的${className}的id
     * @return
     * @throws Exception
     */
    @Override
    public boolean deleteBy${pk.attrName}(${pk.attrType} ${pk.attrname}) throws Exception {
        ${classname}Mapper.delete(${pk.attrname});
        return true;
    }
	
	 /**
     * 分页查询${className}
     * @param currentPage 当前页码
     * @param pageSize  页码大小
     * @return 分页查询的结果封装到PageInfo中
     */
    @Override
    public PageInfo findByPage${className}(int currentPage, int pageSize) {
        PageHelper.startPage(currentPage, pageSize, true);
        List<${className}> list = ${classname}Mapper.findAll();
        PageInfo<${className}> pageInfo = new PageInfo<>(list);
        return pageInfo;
     }
}
